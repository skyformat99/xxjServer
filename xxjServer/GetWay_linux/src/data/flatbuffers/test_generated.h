// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_TESTAPP_H_
#define FLATBUFFERS_GENERATED_TEST_TESTAPP_H_

#include "flatbuffers/flatbuffers.h"

namespace TestApp {

struct KV;

struct TestObj;

MANUALLY_ALIGNED_STRUCT(8) KV FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t key_;
  double value_;

 public:
  KV() {
    memset(this, 0, sizeof(KV));
  }
  KV(const KV &_o) {
    memcpy(this, &_o, sizeof(KV));
  }
  KV(uint64_t _key, double _value)
      : key_(flatbuffers::EndianScalar(_key)),
        value_(flatbuffers::EndianScalar(_value)) {
  }
  uint64_t key() const {
    return flatbuffers::EndianScalar(key_);
  }
  double value() const {
    return flatbuffers::EndianScalar(value_);
  }
};
STRUCT_END(KV, 16);

struct TestObj FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_FLAG = 8,
    VT_LIST = 10,
    VT_KV = 12
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint8_t flag() const {
    return GetField<uint8_t>(VT_FLAG, 0);
  }
  const flatbuffers::Vector<uint64_t> *list() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_LIST);
  }
  const KV *kv() const {
    return GetStruct<const KV *>(VT_KV);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint8_t>(verifier, VT_FLAG) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LIST) &&
           verifier.Verify(list()) &&
           VerifyField<KV>(verifier, VT_KV) &&
           verifier.EndTable();
  }
};

struct TestObjBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(TestObj::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TestObj::VT_NAME, name);
  }
  void add_flag(uint8_t flag) {
    fbb_.AddElement<uint8_t>(TestObj::VT_FLAG, flag, 0);
  }
  void add_list(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> list) {
    fbb_.AddOffset(TestObj::VT_LIST, list);
  }
  void add_kv(const KV *kv) {
    fbb_.AddStruct(TestObj::VT_KV, kv);
  }
  TestObjBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestObjBuilder &operator=(const TestObjBuilder &);
  flatbuffers::Offset<TestObj> Finish() {
    const auto end = fbb_.EndTable(start_, 5);
    auto o = flatbuffers::Offset<TestObj>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestObj> CreateTestObj(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint8_t flag = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> list = 0,
    const KV *kv = 0) {
  TestObjBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_kv(kv);
  builder_.add_list(list);
  builder_.add_name(name);
  builder_.add_flag(flag);
  return builder_.Finish();
}

inline flatbuffers::Offset<TestObj> CreateTestObjDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const char *name = nullptr,
    uint8_t flag = 0,
    const std::vector<uint64_t> *list = nullptr,
    const KV *kv = 0) {
  return TestApp::CreateTestObj(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0,
      flag,
      list ? _fbb.CreateVector<uint64_t>(*list) : 0,
      kv);
}

inline const TestApp::TestObj *GetTestObj(const void *buf) {
  return flatbuffers::GetRoot<TestApp::TestObj>(buf);
}

inline bool VerifyTestObjBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestApp::TestObj>(nullptr);
}

inline void FinishTestObjBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TestApp::TestObj> root) {
  fbb.Finish(root);
}

}  // namespace TestApp

#endif  // FLATBUFFERS_GENERATED_TEST_TESTAPP_H_
